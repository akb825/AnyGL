# Copyright 2017 Aaron Barany
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from .reg import *
from .FunctionInfo import *

class GLXWHeaderGenerator(OutputGenerator):
	def __init__(self, systemIncludes, define, systemDefines = [], extensionsOnly = True,
		errFile = sys.stderr, warnFile = sys.stderr, diagFile = sys.stdout):
		OutputGenerator.__init__(self, errFile, warnFile, diagFile)
		self.systemIncludes = systemIncludes
		self.define = define
		self.systemDefines = systemDefines
		self.extensionsOnly = extensionsOnly
		self.curFunctions = []
		self.curFeature = None
		self.extension = False

	def newLine(self):
		write('', file = self.outFile)

	def beginFile(self, genOpts):
		OutputGenerator.beginFile(self, genOpts)
		if self.genOpts.filename:
			headerSym = '__AnyGL_' + re.sub('\.h', '_h_', os.path.basename(self.genOpts.filename))
			write('#pragma once', file = self.outFile)
			write('#ifndef', headerSym, file = self.outFile)
			write('#define', headerSym, '1', file = self.outFile)
			self.newLine()

		write('#include "AnyGLConfig.h"', file = self.outFile)
		write('#ifndef ANYGL_IMPL', file = self.outFile)
		write('#include "gl.h"', file = self.outFile)
		write('#endif', file = self.outFile)
		self.newLine()
		write('#if ANYGL_LOAD ==', self.define, file = self.outFile)
		for define in self.systemDefines:
			write('#define', define, file = self.outFile)
		for include in self.systemIncludes:
			write('#include <' + include + '>', file = self.outFile)
		self.newLine()

		write('/* Generated by AnyGL. */', file = self.outFile)
		self.newLine()

		write('#ifdef __cplusplus', file= self.outFile)
		write('extern "C" {', file = self.outFile)
		write('#endif', file = self.outFile)
		self.newLine()

	def endFile(self):
		self.newLine()
		write('#ifdef __cplusplus', file = self.outFile)
		write('}', file = self.outFile)
		write('#endif', file = self.outFile)

		self.newLine()
		write('#endif /* ANYGL_LOAD */', file = self.outFile)
		self.newLine()

		if self.genOpts.filename:
			self.newLine()
			write('#endif', file = self.outFile)

		OutputGenerator.endFile(self)

	def beginFeature(self, interface, emit):
		OutputGenerator.beginFeature(self, interface, emit)
		self.extension = interface.tag == 'extension'
		if emit:
			self.curFeature = interface.get('name')
			write('#ifndef', self.curFeature, file = self.outFile)
			write('#define', self.curFeature, '1', file = self.outFile)

	def endFeature(self):
		self.newLine()

		if self.curFunctions:
			if self.extension or not self.extensionsOnly:
				# Function types
				for function in self.curFunctions:
					if not function.alias:
						write(function.getTypeDecl(), file = self.outFile)
				self.newLine()

				# Function pointers
				for function in self.curFunctions:
					if not function.alias:
						write('ANYGL_EXPORT extern', function.type, 'AnyGL_' + function.name + ';',
							file = self.outFile)
				self.newLine()

				# Function defines.
				write('#ifndef ANYGL_IMPL', file = self.outFile)
				for function in self.curFunctions:
					name = function.name
					if function.alias:
						name = function.alias
					write('#define', function.name, 'AnyGL_' + name, file = self.outFile)
				write('#endif /* ANYGL_IMPL */', file = self.outFile)
			else:
				for function in self.curFunctions:
					write(function.getFunctionDecl(), file = self.outFile)

		if self.curFeature:
			write('#endif', '/*', self.curFeature, '*/', file = self.outFile)
			self.curFeature = None
		self.newLine()
		self.curFunctions = []
		OutputGenerator.endFeature(self)

	def genType(self, typeinfo, name):
		OutputGenerator.genType(self, typeinfo, name)

		typeElem = typeinfo.elem
		s = noneStr(typeElem.text)
		for elem in typeElem:
			if (elem.tag == 'apientry'):
				s += 'APIENTRY' + noneStr(elem.tail)
			else:
				s += noneStr(elem.text) + noneStr(elem.tail)
		if (len(s) > 0):
			write(s, file = self.outFile)

	def genEnum(self, enuminfo, name):
		OutputGenerator.genEnum(self, enuminfo, name)

		s = '#define ' + name.ljust(33) + ' ' + enuminfo.elem.get('value')
		#
		# Handle non-integer 'type' fields by using it as the C value suffix
		t = enuminfo.elem.get('type')
		if (t != '' and t != 'i'):
			s += enuminfo.type
		write(s, file = self.outFile)

	def genCmd(self, cmdinfo, name):
		OutputGenerator.genCmd(self, cmdinfo, name)
		self.curFunctions.append(FunctionInfo(cmdinfo.elem))
