# Copyright 2017 Aaron Barany
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from .reg import *
from .FunctionInfo import *

class FeatureInfo:
	def __init__(self, interface):
		self.name = interface.get('name')
		self.extension = interface.tag == 'extension'
		if self.extension:
			self.version = None
		else:
			self.version = float(interface.get('number'))

		# glXGetProcAddress() was introduced in version 1.4, meaning that's the first version we
		# can be guaranteed to dynamically load newer functions.
		self.isCore = self.version != None and self.version <= 1.4
		self.functions = []

class GLXInitGenerator(OutputGenerator):
	def __init__(self, errFile = sys.stderr, warnFile = sys.stderr, diagFile = sys.stdout):
		OutputGenerator.__init__(self, errFile, warnFile, diagFile)
		self.coreFeatures = []
		self.extensionFeatures = []
		self.curFeature = None

	def newLine(self):
		write('', file = self.outFile)

	def beginFile(self, genOpts):
		OutputGenerator.beginFile(self, genOpts)

		write('#include "AnyGLConfig.h"', file = self.outFile)
		self.newLine()
		write('#if ANYGL_LOAD == ANYGL_LOAD_GLX', file = self.outFile)

	def endFile(self):
		write('#include <GL/glx.h>', file = self.outFile)
		self.newLine()

		for feature in self.coreFeatures:
			write('#ifdef', feature.name, file = self.outFile)
			write('#define', 'HAS_' + feature.name, file = self.outFile)
			write('#endif', file = self.outFile)
		self.newLine()

		write('#define ANYGL_IMPL', file = self.outFile)
		write('#include "glx.h"', file = self.outFile)
		self.newLine()

		write('/* Generated by AnyGL. */', file = self.outFile)

		# Type declarations.
		self.newLine()
		for feature in self.coreFeatures:
			for function in feature.functions:
				write(function.getTypeDecl(), file = self.outFile)
		for feature in self.extensionFeatures:
			for function in feature.functions:
				if not function.alias:
					write(function.getTypeDecl(), file = self.outFile)

		# Function pointer declarations.
		self.newLine()
		for feature in self.coreFeatures:
			for function in feature.functions:
				write('ANYGL_EXPORT', function.type, 'AnyGL_' + function.name + ';',
					file = self.outFile)
		for feature in self.extensionFeatures:
			for function in feature.functions:
				if not function.alias:
					write('ANYGL_EXPORT', function.type, 'AnyGL_' + function.name + ';',
						file = self.outFile)

		self.newLine()
		write('int AnyGL_initialize(void)\n{', file = self.outFile)

		write('\tstatic int initialized;', file = self.outFile)
		write('\tif (initialized)', file = self.outFile)
		write('\t\treturn 1;', file = self.outFile)
		self.newLine()

		# Core functions load from system pointers.
		for feature in self.coreFeatures:
			write('#ifdef', 'HAS_' + feature.name, file = self.outFile)
			for function in feature.functions:
				write('\tAnyGL_' + function.name + ' = &' + function.name + ';',
					file = self.outFile)
			write('#endif', '/*', feature.name, '*/', file = self.outFile)
			self.newLine()

		# Special handling for glXGetProcAddressARB
		write('#ifdef GLX_ARB_get_proc_address', file = self.outFile)
		write('\tif (!AnyGL_glXGetProcAddress)', file = self.outFile)
		write('\t\tAnyGL_glXGetProcAddress = &glXGetProcAddressARB;', file = self.outFile)
		write('#endif /* GLX_ARB_get_proc_address */', file = self.outFile)
		self.newLine()

		# Extension functions load from glXGetProcAddress.
		write('\tif (!AnyGL_glXGetProcAddress)', file = self.outFile)
		write('\t\treturn 0;', file = self.outFile)
		self.newLine()

		for feature in self.extensionFeatures:
			write('\t/*', feature.name, '*/', file = self.outFile)
			for function in feature.functions:
				write('\tAnyGL_' + function.name + ' = (' + function.type + \
					')AnyGL_glXGetProcAddress((const GLubyte*)"' + function.name + '");',
					file = self.outFile)
			self.newLine()

		write('\tinitialized = 1;', file = self.outFile)
		write('\treturn 1;\n}', file = self.outFile)

		self.newLine()
		write('void AnyGL_shutdown(void) {}', file = self.outFile)

		self.newLine()
		write('#endif /* ANYGL_LOAD */', file = self.outFile)

		OutputGenerator.endFile(self)

	def beginFeature(self, interface, emit):
		OutputGenerator.beginFeature(self, interface, emit)
		if emit:
			self.curFeature = FeatureInfo(interface)

	def endFeature(self):
		if self.curFeature:
			if self.curFeature.isCore:
				self.coreFeatures.append(self.curFeature)
			else:
				self.extensionFeatures.append(self.curFeature)
			self.curFeature = None
		OutputGenerator.endFeature(self)

	def genCmd(self, cmdinfo, name):
		OutputGenerator.genCmd(self, cmdinfo, name)
		self.curFeature.functions.append(FunctionInfo(cmdinfo.elem, 'ANYGL'))
